협업지원 웹사이트 만들기.

참조 사이트
 1. Asana
 2. GitHub
 3. Notion

현재 채택 기술스택

 - SpringBoot / Gradle / JPA
 - React
 - MySQL / Redis / ## MongoDB ( MongoDB 는 나중에 사용해볼 예정)

--------------------------------------------------------------------------------

React 사용이유는 ?

1. 컴포넌트 기반 아티텍처
 - UI 를 독립적인 컴포넌트로 나누어 재사용성이 높고 유지보수가 쉬움.
 - 예를 들어, Draggable, Droppable 과 같은 컴포넌트를 모듈화 가능.

2. Vertual DOM 사용
 - 실제 DOM 대신 가상 DOM을 사용해 최소한의 업데이트로 빠른 렌더링을 보장
 - 드래그 앤 드롭처럼 UI 상태가 빈번히 변화하는 애플리케이션에서 성능이 우수

3. 풍부한 생태계
 - react-beautiful-dnd, react-dnd, react-spring 등 다양한 라이브러리가 존재해 드래그 앤 드롭 구현을 간소화.

4. 단방향 데이터 흐름
 - 상태관리가 직관적이며 예측 가능.
 - 예: useState 나 userReducer 로 컴포넌트 상태를 쉽게관리.

5. 커뮤니티와 지원
 - React는 널리 사용되며, 문제 해결과 학습 자료가 풍부.

#번외

외부 라이브러리에 의존성이 높다  특정 기능 구현 시 여러 서드파티 라이브러리를 사용해야하는 경우가 많은점은 단점으로 작용 할 수 있다. 염두해두기

## 꼭 React를 사용하지 않고 할만한 방법은???

1. Vue.js
장점
 - 문법이 직관적이고 간단하며 HTML과 템플릿 구문이 유사하여 쉽게 익히기 좋다
 - 내장기능으로 상태관리(Vuex)와 라우팅(Vue Router)가 기본으로 제공된다
 - 컴포넌트기반으로 React와 마찬가지로 UI를 컴포넌트로 분리해 관리가 가능하다

단점
 - React에 비해 서드파티 라이브러리와 확장 기능이 제한전
 - React보다 상대적으로 커뮤니티가 작음으로 인해 기술 지원 자료가 부족 할 수 있음.

2. Angular
장점
 - 완전한 프레임워크 이다 angular는 상태관리, 라우팅, HTTP 요청 등 다양한 기능을 내장
 - 양방향 데이터 바인딩으로 모델과 뷰 간의 데이터 싱크를 자동화.
 - TypeScript 기반으로 더 강력한 타입을 지원

단점
 - React나 Vue.js 보다 복잡하고 설정과 사용법을 익히는 데 시간이 더걸림
 - Angular의 방대한 기능으로 인해 애플리케이션 크기가 상대적으로 크므로 무겁다

3. Vanilla javaScript
장점
 - 외부 라이브러리 없이 애플리케이션 크기를 최소화 가능.
 - 모든브라우저에서 지원되며, 추가 학습 없이 사용 가능

단점
 - React 나 Vue.js 처럼 상태 관리 도구가 없으므로 대규모 애플리케이션에 불리하다
 - 컴포넌트 기반 구조를 구현하려면 수작업으로 해야 하다 즉 코드 재사용성이 제한적이다.

----------------------------------------------------------------------------------------------------------

DataBase

MySQL(RDBMS)
 - 관계형 데이터 저장 용도
	사용자 계정 정보, 권한 관리, 팀 정보, 보드, 카드 데이터를 관계형으로 저장 용도로 사용
    	# 한 보드에는 여러 컬럼이 있고, 한 컬럼에는 여러 카드가 있을 때 관계를 명확히 정의
	#트랜잭션 관리 주목 데이터 일관성 보장해야함.
/*
MySQL은 읽기 성능에 최적화되어 있어 높은성능을 제공하여 특히 읽기 중심 어플리케이션에 적합, 간단한 쿼리에서는 매우 빠르게 동작하며 인덱스를 활용한 성능 최적화가 잘 이루어 짐.
하지만 쓰기작없은 읽기에 비해 성능이 떨어지는 부분이 있고 이점은 대규모 데이터 삽입 및 업데이트 작업에는 성능이 떨어질 수 있는 점을 생각해야한다.

PostgreSQL 과 비교했을때 성능이 떨이지는부분 예를들어 트랜젝션 처리, 복잡한 쿼리 및 쓰기작업 성능, 스키마의 확장성, JSON처리 , 고급기능 등을 고려했을때 PostgreSQL 이 더 우수한점이 있지만,
조금 더 공부의 깊이가 필요하며 현재 진행할 개인 프로젝트를 함에 있어 MySQL사용으로 충분한 성능을 기대할수 있으며 개발 기간 단축  간단한CRUD를 처리하는 부분이라 더 무거운 PostgreSQL 을 사용에 필요성을 느끼지 못하고 Redis 를 활용하여 단점을 보완할수 있을 것 같다.

MySQL + Redis

1 MySQL
 - 고정된 스키마와 구조화된 데이터관리 칸반보드에서 사용자정보, 프로젝트상태, 작업목록, 팀관리, 권한 관리 등과 같은 데이터
 - 트랜젝션을 안정적으로 처리 하도록하여 , 팀 초대  및 작업상태 변경과 같은 중요한 데이터 관리

2 Redis
 - 팀원들간의 실시간 채팅, 작업 상태 업데이트 (칸반보드의 카드 드래그 앤 드롭 ) 알림시스템 등의 처리에 사용

*/


Redis
 - 캐싱과 실시간 데이터 관리 용도
	실시간채팅 메시지를 임시로 저장해 빠른 정달, 세션관리 사용자 인증 세션을 Redis에 저장, JWT 토큰 검증이나 세션 만료 처리에 활용 예정
	간반보드에서 작업 상태 변경이 실시간으로 동기화 되도록 WebSocket 과 연계 예정
	빠른 읽기/쓰기 성능 이나 실시간 데이터 처리에 강점을 활용

/*
Redis는 전통적인 HDD저장이아닌 RAM에 저장하고 직접처리를 하여 읽기/쓰기가 빠르다
단일스레드 아키텍처와 효율적인 데이터구조를 통해 성능을 극대화 했으며, 파이프라이닝 기법을 활용하여 여러요청을 동시처리
## 파이프라이닝
	여러명령어를 네트워크로 보낼때 각 요청에 대한 응답을 기다리지 않고 여러요청을 함께보내고, 한번에 응답 받는 기법

요점
메모리 기반 저장소 / 단일스레드 아키텍처 / 고유한 데이터 구조 / 데이터를 메모리에서만 관리 / 파이프라이닝 / 데이터 압축 및 최적화

*/

MongoDB(NoSQL)
 - 비정형 데이터 저장 용도
	#채팅메시지 저장 = 메시지 내용을 JSON 형태로 저장
	#활동 로그 = 팀 활동 기록, 작업 변경 히스토리 저장
	#대시보드 데이터 = 비정형 데이터를 저장해 팀 ㅋ도는 프로젝트 성과를 분석

	JON 형태의 데이터 저장이 용이하고 스키마가 유연하여 구조 변경에 강한점을 활용하기

	/*
	초기 개발에서는 사용하지 않을 예정 개발 복잡성을 낮추고 추후 리팩토링을 통해 추가하는게 초기개발에 좋을듯.

	비정형데이터란?
	비정형데이터란 구조화 되지 않은 데이터를 의미 (명확한 형식이나 구조가 아닌 데이터)
	관계형 DB는 스키마(테이블구조) 에 맞춰 데이터를 저장해야 하기 때문에 정형데이터(정해진 형식으로 구분된 데이터)만을 처리하지만 비정형데잍는 그런 제한이없다
	예시로
	1 텍스트데이터 : 자유로운 형식의 텍스트 데이터 (이메일,문서,채팅메시지 등)
	2 이미지,오디오,비디오 : 멀티미디어 파일들은 특정 형식에 맞는 데이터를 담고잇지만, 관계형DB에 저장하기에는 유연성이 부족하다
	3 로그데이터 : 서버로그,이벤트 로그 등에서 나온 데이터들은 고정된 형식 없이 다양한 정보가 포함되어 있을 수 있다.
	4소셜미디어 데이터 : 트위터,페이스북,인스타그램의 사용자 게시글이나 댓글 등 은 다양한 형식의 데이터를 포함하고 있다.
	*/


