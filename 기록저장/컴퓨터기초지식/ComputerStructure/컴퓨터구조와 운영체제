컴퓨터 구조 와 운영체제 끄적끄적


################################################
컴퓨터 구조

컴퓨터는 미지의 대상이 아니라 분석의 대상이다 라는 시각을 갖기

컴퓨터가 이해하는 두 가지 정보 : 데이터
-명령어를 위한 재료

컴퓨터가 이해하는 두 가지 정보  : 명령어

컴퓨터의 네가지 핵심 부품

1. CPU : 메모리에 저장되어있는 명령어를 읽어들이고, 해석하고 실행하는 부품
-ALU = 계산기
-제어장치 = 제어신호를 내보내고 , 명령어를 해석하는 장치( 제어신호란 컴퓨터 부품들을 관리하고 작동시키기 위한 전기신호)
-레지스터 = CPU 내부의 작은 저장장치

2. 메모리(RAM) : "현재 실행되는" 프로그램의 명령어와 데이터를 저장하는 부품 (휘발성)
-프로그램이 실행되려면 메모리에 저장 되어 있어야한다
-메모리에 저장된 값의 위치는 주소로서 저장 되 있다.

3. 보조기억장치 : 전원이 꺼져도 저장이 가능한 장치이며 용량 또한 RAM 에비해 크며 가격도 더 저렴하다

4. 입출력장치 : 컴퓨터 외부에 연결되서 컴퓨터 내부와 정보를 교환할수 있는 장치 ( 마우스,키보드,프린터 등..)

* 제어장치가 메모리 주소 (EX:1번지) 를 읽어 들이고 CPU 내부 레지스터에 가지고 와 해석 한다.
  해석한 명령어에 필요한 데이터를 다시 메모리에서 가지고와 ALU 로 계산 하여 결과를 레지스터에 저장하고
  이를 다시 제어장치가 비어있는 메모리에 저장
 

################################################
운영체제(OS)

시스템 자원
-프로그램이 실행되기 위해 마땅히 필요한 요소
-컴퓨터의 네 가지 핵심 부품 포함

운영체제
-자원을 관리하는 특별한 프로그램
-실행 중인 프로그램을 관리하는 특별한 프로그램  (*실행중인 프로그램은 프로세스라고 불림)
 즉 자원 및 프로세스를 관리하는 특별한 프로그램으로 볼수있다

운영체제는 메모리에 저장되어 있지만 특별하게 운영체제는 커널 영역에 적재되어있다
그외 공간은 사용자 영역에 적재되어진다

즉 우리가 무언가 실행하고 종료 하는 걸 관리하는걸 운영체제가 하는 역할 중 하나 이다
앞에 말했듯이 프로그램을 실행하려면 메모리에 저장되어야하고 이 메모리의 자원을 관리하는게 운영체제가 하는것!
추가!
메모리에 저장된 프로세스 들은 실행되기위해 CPU를 필요로한다  과연 여러 프로세스가 CPU에서 실행될때
누가 먼저 CPU를 사용할지 CPU 관리 (CPU스케줄링) 또한 운영체제의 역할!

개발자가 운영체제를 관리해야하는 이유 중 대표적인게 바로 이 프로세스들을 관리하는 것이 운영체제 이기때문인데
수많은 프로세스들이 자원을 필요로할때 어떤식으로 운영체제가 프로세스들을 어떠한 방식으로 관리하는지 중요하다(프로세스 동기화)

## 예를들어 프로세스 A 와 프로세스 B 는 어떻한 자원에 동시에 접그하면 안된다던가, 동시에 실행하는건 괜찮지만 프로세스 C 는 프로세스 D 가
    실행 된 다음에 실행해야 된다는 걸 이해하는 것이 필요할듯

수많은 프로세스들이 자원에 마구마구 직접 접근하면 안되기 때문에 자원을 보호하는 역할 즉 문지기 역할도 한다
즉 실행중인 프로세스들은 운영체제를 통해서 자원에 접근할수 있으며 이것을 시스템 호출 이라 한다


###################################################
운영체제를 알아야하는 이유?

운영체제는 사용자를 위한 프로그램이 아니다
운영체제는 프로그램을 위한 프로그램이므로, 프로그램을 만드는 개발자는 운영체제로부터 어떠한 도움을 받을수있는지
또는 에러가 발생했을때 오류 메세지에서 어떻한 점이 문제인지 깊게 이해할 수 있다. 오류메세지 또한 근원적으로 운영체제가 보내는 것이기때문

여기서 비교해보면
윈도우 VS 리눅스
운영체제의 핵심부분인 커널!!! 윈도우 같은 경우는 하이브리드 커널(마이크로커널(Microkernel) + 모놀리식 커널(Monolithic Kernel) ) 이며 성능과 안정성을 균형있게 유지하려고 설계되었고
커널모드와 유저모드로 나뉘며 많은 시스템 서비스가 유저 모드에서 실행된다
반면 리눅스는 모놀리식커널 로서 하나의 커널이 모든 OS 기능을 담당하여 모든 프로세스가 커널공간에서 실행되어 성능이 좋고 커널모듈을 동적으로 추가/삭제가
가능하여 유연함을 갖추고 있다 경량화 및 최적화가 가능하여 서버 , 임베디드, 슈퍼컴퓨터 등 다양한 환경에서 사용된다

또 다른점은 윈도우는 스레드 중심 이며 리눅스는 프로세스 중심 인점이다 리눅스의 fork()는 새로운 프로세스를 효율적으로 복사하는데 최적화되어있으며
윈도우는 페이지 파일을 적극적으로 활용하고 , 리눅스는 Swap메모리를 사용하여 메모리를 확장는 특징도있으며
파일시스템 구조 에서도 기본 파일 시스템이 다르며 경로또한 윈도우는 드라이브 기반 리눅스는 단일루트 구조로 되어있고 권한또한 차이를 보인다