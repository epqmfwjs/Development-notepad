// 자료구조 종류 와 내가생각하는 것

1. 선형구조

    1-1 배열(Array)
    -   Data의 추가/삭제 기능을 많이 쓰는 기능에는 사용이 배효율적인거같음. 추가/삭제 시 데이터 이동이 너무많아져서 OverHead 가 많아짐
        반면에  RandomAccess 가 가능하여 원하는 위치 접근이 용이함  그러므로 조회관련 쪽에서는 좋은성능을 기대할 수 있을듯
        메모리 잡아먹는 양도 리스트에 비하여 적은 것으로 알고있음 그리고 배열은 배열이라는 한덩어리로 저장됨

    1-2 리스트(List)
    -   리스트는 Head 가 가르키는 곳을 첫 번째가됨 데이터가 index 0 과 같은 느낌 하지만 연결리스트의 경우 배열과다르게 자신의 다음연결 주소를
        같이가지고있는데 이는 8byte 를 더 차지하기에 메모리를 더 많이 차지함.
        리스트는 이러한 점때문에 중간에 삽입/삭제가 용이하여 배열과는 다른 이점이 있음 그리고 리스트는 배열이랑다르게 원소 하나 하나 개별로 저장됨

    1-3 스택(stack)
    -   LIFO (last In Fist Out)  삽입과 삭제가 같은곳 1,2,3을 넣고 3,2,1 순서로 삭제되는 구조 말그대로 후입선출
        용어로는 top,push,pop  순서대로 가장 최근에 저장된 데이터 인 top , 데이터 삽입인 push , 데이터삭제인 pop 가 있다
        그렇다면 배열로 구현하기 친숙할듯  배열로 구현할경우 많은 데이터 이동이 없이 사용가능할꺼같아서 나중에 개발할때 적용해봐야할듯
        그러고보니 사용경험이 하나 생각나는데 CaffeineCheckMate-Refactoring 개인프로젝트중  카페인계산기에 실행취소 기능 구현중
        javascript 에서 배열로 값을 저장하고 실행취소할때 마지막 저장된 배열 값을 계속 이용해서 구현하던게 기억이 났음
        재귀함수나 문자열 역순 이런것도 생각나고 흔하게 웹 사이트 뒤로가기 정도?도 생각이남 그러다보니 피보나치 수열도 생각이 나네..


    1-4 큐(Queue)
    -   FIFO (First In First Out) 삽입과 삭제가 다른쪽 먼저저장하면 저장한순서대로 삭제  말그대로 선입선출 군대...!!가 생각이나는데 왜..
        용어로는 enqueue,dequeue,front,rear  데이터 삽입의 enqueue, 데이터 삭제의 dequeue, 삭제되는 데이터를 가르키는 front, 새로 저장된 새로운 요소위치를 가르키는 rear
        javascript 의 콜백 큐? 우선순위 큐  원형 큐라고 종류가 더있고 기본적으로 선형큐 라고 부름
        시간복잡도도 알아보았지만 아직은 이해가 잘안된다 삽입/삭제에는 O(1) 탐색에는 O(n) 시간 복잡도를 가진다는데 아직은 어렵다


2. 비선형구조

